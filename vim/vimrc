filetype off
call pathogen#runtime_append_all_bundles()
set rtp+=$GOROOT/misc/vim
filetype plugin indent on

set nocompatible
set modelines=0

set backspace=2


" Pretty settings
set number
set ts=4 sts=2 sw=2 expandtab
set linebreak

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

set wrap
set textwidth=95
set formatoptions=qrn1
set colorcolumn=105

set sua=.js,.jsx

set path=.,/usr/include,,**

set mouse=i

" From vimcasts.org
" Hold command and press navigation key inorder to navigate to apparent 
" lines.
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^

nmap <silent> <Leader>t :CtrlP<CR>
let g:ctrlp_match_window = 'max:50,results:50'

let g:ctrlp_custom_ignore = '\v(\/public\/|\/node_modules\/)'

function Do256()
    " Enable 256 colors
    set t_Co=256
    set t_AB=[48;5;%dm
    set t_AF=[38;5;%dm
endfu

function UnDo256()
    " Enable 256 colors
    set t_Co &vim 
    set t_AB &vim
    set t_AF &vim
endfu

if match($TERMCAP, 'Co#256:') == 0 || match($TERMCAP, ':Co#256:') > 0 || match($TERM, 'screen') == 0          
  call Do256()
endif    

if $TERM =~ "screen" || $TERM =~ "screen-256color"
  let g:CommandTCancelMap     = ['<ESC>', '<C-c>']
  let g:CommandTSelectNextMap = ['<C-n>', '<C-j>', '<ESC>OB']
  let g:CommandTSelectPrevMap = ['<C-p>', '<C-k>', '<ESC>OA']
endif

com! -nargs=* Color256 exe Do256()
com! -nargs=* UnColor256 exe UnDo256()

syntax on
set nocp
filetype plugin on
filetype indent on
set guifont=DejaVu\ Sans\ Mono:h20
" If not gui
colorscheme Vitamins_Vim_Colorscheme_by_hcalves
" Color Scheme (only if GUI running)
if has("gui_running")
  colorscheme Vitamins_Vim_Colorscheme_by_hcalves
  set guifont=DejaVu\ Sans\ Mono:h14
endif

let g:rubycomplete_buffer_laoding = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

au BufRead,BufNewFile *.hamlc set ft=haml

if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
        \	if &omnifunc == "" |
        \		setlocal omnifunc=syntaxcomplete#Complete |
        \	endif
endif
set noswapfile


command W w !sudo tee % > /dev/null

if &diff
  colorscheme evening
endif

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap j gj
nnoremap k gk

" Return indent (all whitespace at start of a line), converted from
" tabs to spaces if what = 1, or from spaces to tabs otherwise.
" When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
  let spccol = repeat(' ', a:cols)
  let result = substitute(a:indent, spccol, '\t', 'g')
  let result = substitute(result, ' \+\ze\t', '', 'g')
  if a:what == 1
    let result = substitute(result, '\t', spccol, 'g')
  endif
  return result
endfunction

" Convert whitespace used for indenting (before first non-whitespace).
" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
" cols = string with number of columns per tab, or empty to use 'tabstop'.
" The cursor position is restored, but the cursor will be in a different
" column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
  let savepos = getpos('.')
  let cols = empty(a:cols) ? &tabstop : a:cols
  execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
  call histdel('search', -1)
  call setpos('.', savepos)
endfunction

command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)
command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>)

autocmd FileType c,cpp,java,ruby,css,haml,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e


